[{"authors":["admin"],"categories":null,"content":" I’m a software engineer at RStudio. Most of my work involves creating R packages that make it easier to work with and communicate data. I also enjoy opportunities to teach people how to be successful with R.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"d33c1cd8bead9ce2a6229ddb7fdca4a5","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I’m a software engineer at RStudio. Most of my work involves creating R packages that make it easier to work with and communicate data. I also enjoy opportunities to teach people how to be successful with R.","tags":null,"title":"Richard Iannone","type":"authors"},{"authors":[],"categories":[],"content":"    English  French  German    The newest release of the blastula package lets you to do amazing things with HTML email in R and RStudio Connect. You can install blastula 0.3 from CRAN with:\ninstall.packages(\u0026quot;blastula\u0026quot;) This is a huge release! There are so many new and improved features we won’t be able to get through all of them here. Let’s focus on just two: R Markdown report emailing and improved HTML emailing using SMTP.\nR Markdown Report Emailing via RStudio Connect The capability to email a rendered R Markdown document in RStudio Connect has been available for well over a year. What would happen is that the report would be in the form of an attachment and message portion of the email would be prepared largely by RStudio Connect. With blastula v0.3, we can now create an email message body directly with R Markdown. Moreover, we can have a ‘main’ report for RStudio Connect viewers (with all of the details) and an ‘email’ version of the report that contains only the necessary elements for the purposes of email.\nStatic elements like ggplots and images can be part of the R Markdown email. The contents are faithfully converted to an HTML email message body that is fully responsive, so it’ll look great on both larger displays and on mobile devices. We went to great lengths to test and ensure that received emails display without problems on dozens of email clients.\nIf you thought that emailing R Markdown reports from RStudio Connect was a bit more difficult than should be, you’ll like this next part. There is now an easier-to-use methodology for associating an email to a published R Markdown report. The function prepare_rsc_example_files() is included to generate a set of example files relevant to R Markdown emailing in RStudio Connect. It provides a working example of a main .Rmd document, an email .Rmd document, and a CSV file that can be included as an attachment (any files generated from the main .Rmd document can also be attached). Documentation that explains how these documents interact, which blastula functions are used, and how to publish to RSC, is available in the internal documentation for the attach_connect_email() function. An updated support document in the official RStudio Connect documentation is forthcoming.\nI’m pretty sure that RStudio Connect users and the recipients of these emails will love the changes implemented here. Expect further improvements to R Markdown emailing via RStudio Connect in future releases of blastula.\nImproved HTML Emailing Using SMTP RStudio Connect isn’t the only way to send emails with blastula. We can opt to send our own custom emails through an SMTP server we have access to (e.g., Gmail, Outlook, etc.). These are HTML emails that are, again, responsive to display size and have been well tested on dozens of email clients. Let’s quickly look at three things that have changed for the better with regard to email composition and SMTP sending.\nRevised message composition with improved security Previously, text interpolation features from the glue package were built into the compose_email() function. This means we could have used the string \"The date and time of sending is {Sys.time()}.\" directly as input to, say, the message footer. Having the potential for R evaluation in strings invites security risks, so, this is no longer possible. Instead, we can simply opt to use glue::glue() ourselves or paste(). When there is any Markdown or HTML element, the md() function is required. Here is an example of a simple message that uses Markdown:\nemail \u0026lt;- compose_email( body = md( \u0026quot; ## Hello! This is an email message that was generated by the blastula package. Yep, we can use **Markdown** formatting but be sure to use the `md()` function. Here is a link to a great song ([E-MAIL ME!](https://youtu.be/-FcJbEg3vX8)). Cheers, The blastula team \u0026quot;), footer = md( \u0026quot; sent via the [blastula](https://rich-iannone.github.io/blastula) R package \u0026quot;) )  We can always preview the email object in the RStudio Viewer while getting the composition just right. For more details on email message composition with compose_email(), have a look at the Simple Email Composition article on the project website.\nNo external software to install for SMTP sending In the few years that blastula has been available, it relied on various pieces of external software for sending email. Not anymore. This release favors the creation of an RFC-2822 email body, sending through the excellent curl package. This all means that emails can now be sent dependably with the smtp_send() function on all the major platforms with no up-front installation of a third-party binary.\nImproved credentials handling The package now ships with functions for setting up and retrieving SMTP configuration and credentials information. We can set this in the system-wide key-value store with create_smtp_creds_key(). With such a key added, the credentials helper creds_key() can be used when sending email through smtp_send(). Alternatively, a credentials file can be created using the create_smtp_creds_file() function (retrieved with the creds_file() credentials helper). Lastly, credentials can be fully specified at the time of sending with the creds() function. Whenever a password is needed for setup, a prompt will appear for password entry and the password text will be obscured.\nMore! Other quality-of-life improvements include automatic image embedding (via Base64 encoding) from the use of the add_image() and add_ggplot() functions when used in conjunction with compose_email(). There’s the option for automatic image deployment and retrieval of the external image tag through the add_imgur_image() function. Finally, there is a new set of block_*() functions that help us compose emails with more complex layouts.\nWrapping Up I hope that you try out the new release of the blastula package. So many useful things can be created with R and having the means to deliver our findings through email is super satisfying both for the sender and the recipient.\n La nouvelle version du package blastula vous permet de faire des choses sympas avec les e-mails HTML dans R et RStudio Connect. Installez blastula 0.3 de CRAN avec:\ninstall.packages(\u0026quot;blastula\u0026quot;) C’est une énorme sortie et donc il y a beaucoup de nouvelles choses… Je ne pense pas qu’il y ait assez de temps pour parler de tout ici. Mais ça va, regardons deux choses: envoyer des rapports par e-mail avec R Markdown et des e-mails HTML améliorés (via un serveur SMTP).\nEmailing R Markdown Rapports avec RStudio Connect La possibilité d’envoyer un document R Markdown rendu par e-mail est disponible depuis longtemps (dans RStudio Connect). Mais c’était en pièce jointe (un peu décevant). Avec le nouveau package blastula, nous pouvons désormais créer un e-mail entièrement avec R Markdown (le contenu va directement dans l’e-mail). De plus, nous pouvons avoir un rapport «principal» pour les téléspectateurs RStudio Connect (avec tous les détails) et une version «e-mail» du rapport qui contient uniquement les éléments nécessaires aux fins de l’e-mail. Ah… beaucoup mieux!\nLes éléments statiques tels que ggplots et les images peuvent faire partie de l’e-mail R Markdown. Le contenu est converti en un corps de message électronique HTML qui a fière allure sur les grands écrans et sur les téléphones cellulaires. Nous avons fait de grands efforts pour tester tout cela. Cela impliquait de consulter les e-mails de nombreux clients de messagerie.\nL’envoi de rapports R Markdown par RStudio Connect a été un peu difficile. Il est désormais plus facile d’associer un e-mail à un rapport R Markdown publié. La fonction prepare_rsc_example_files() peut être utilisée pour générer un ensemble d’exemples de fichiers. Ces fichiers montrent comment effectuer des e-mails R Markdown dans RStudio Connect. Les fichiers incluent un document .Rmd principal, un document .Rmd de courrier électronique et un fichier CSV qui peut être inclus en tant que pièce jointe. Pourquoi le CSV? Parce que tous les fichiers générés à partir du document principal .Rmd peuvent également être joints! La documentation qui explique comment ces documents interagissent, quelles fonctions blastula sont utilisées et comment publier sur RSC, est disponible dans la documentation interne de la fonction attach_connect_email().\nOuais. Je suis certain que les utilisateurs de RStudio Connect et les destinataires de ces e-mails adoreront les changements mis en œuvre ici. Nous apporterons plus de modifications aux e-mails R Markdown via RStudio Connect dans les prochaines versions de blastula.\nEmailing HTML amélioré à l’aide de SMTP RStudio Connect n’est pas le seul moyen d’envoyer des e-mails avec blastula. Nous pouvons envoyer des e-mails via un serveur SMTP auquel nous avons accès (par exemple, Gmail, Outlook, etc.). Voyons rapidement trois choses qui se sont améliorées en ce qui concerne la composition des e-mails et l’envoi SMTP.\nComposition des messages révisée avec plus de sécurité Auparavant, les fonctions d’interpolation de texte du package glue étaient intégrées à la fonction compose_email(). Cela signifie que nous aurions pu utiliser la déclaration \"The date and time of sending is {Sys.time()}.\" Directement comme entrée dans, disons, le pied de page du message. Le fait d’avoir le potentiel d’évaluation R dans les chaînes entraîne des risques de sécurité, ce n’est donc plus possible. Au lieu de cela, nous pouvons simplement choisir d’utiliser glue::glue() nous-mêmes ou paste(). Lorsqu’il y a un élément Markdown ou HTML, la fonction md() est requise. Voici un exemple de message simple qui utilise Markdown (c’est en anglais):\nemail \u0026lt;- compose_email( body = md( \u0026quot; ## Hello! This is an email message that was generated by the blastula package. Yep, we can use **Markdown** formatting but be sure to use the `md()` function. Here is a link to a great song ([E-MAIL ME!](https://youtu.be/-FcJbEg3vX8)). Cheers, The blastula team \u0026quot;), footer = md( \u0026quot; sent via the [blastula](https://rich-iannone.github.io/blastula) R package \u0026quot;) )  Nous pouvons toujours prévisualiser l’objet email dans la RStudio Viewer tout en obtenant la composition parfaite. Pour plus de détails sur la composition des e-mails avec compose_email(), consultez l’article Simple Email Composition sur le site web du projet.\nAucun logiciel externe n’est nécessaire pour envoyer des e-mails avec SMTP Au cours des quelques années où blastula a été disponible, il s’est appuyé sur divers logiciels externes pour envoyer des e-mails. Ce n’est plus vrai. Nous créons maintenant un corps d’e-mail RFC-2822 et envoyons des e-mails avec une fonction du package curl. Désormais, les e-mails peuvent désormais être envoyés de manière fiable avec la fonction smtp_send() sur toutes les principales plates-formes informatiques sans aucune dépendance difficile à installer.\nAmélioration de la gestion des informations d’identification Le package possède désormais des fonctions de configuration et de récupération des informations de configuration et d’informations d’identification SMTP. Nous pouvons configurer cela avec create_smtp_creds_key(). Avec une telle clé ajoutée, l’aide aux informations d’identification creds_key() peut être utilisée lors de l’envoi d’e-mails via smtp_send(). Alternativement, un fichier d’informations d’identification peut être créé en utilisant la fonction create_smtp_creds_file() (récupérée avec creds_file()). Enfin, les informations d’identification peuvent être entièrement spécifiées au moment de l’envoi avec la fonction creds(). Chaque fois qu’un mot de passe est nécessaire, une invite apparaîtra pour la saisie du mot de passe (le texte du mot de passe sera masqué).\nIl y a encore plus! D’autres changements incluent l’intégration automatique d’images (via l’encodage Base64) à partir de l’utilisation des fonctions add_image() et add_ggplot() lorsqu’elles sont utilisées avec compose_email(). La fonction add_imgur_image() facilite l’utilisation d’images externes dans les e-mails. Enfin, il existe un nouvel ensemble de fonctions block_*() qui nous aident à composer des e-mails avec des mises en page plus complexes.\nConclusion J’espère que vous essayez la nouvelle version du package blastula. Nous pouvons créer des choses utiles avec R et avoir les moyens de livrer nos résultats par e-mail est super cool pour l’expéditeur et le destinataire.\n Mit der neuen Version des blastula-Pakets können Sie in R und RStudio Connect coole Dinge mit HTML-E-Mails tun. Installieren Sie CRAN blastula 0.3 mit:\ninstall.packages(\u0026quot;blastula\u0026quot;) Dies ist ein ziemlich umfangreiches Software-Upgrade! Es gibt so viele neue und verbesserte Funktionen, dass wir sie hier nicht alle durcharbeiten können. Schauen wir uns zwei neue Themen an: R Markdown Bericht-E-Mail und verbessertes HTML-E-Mail mit SMTP.\nR Markdown E-Mail-Berichte mit RStudio Connect Die Möglichkeit, ein per E-Mail gesendetes R Markdown-Dokument zu senden, ist seit langem verfügbar (in RStudio Connect). Aber es war anhaftend (etwas enttäuschend). Mit dem neuen Blastula-Paket können wir jetzt eine E-Mail komplett mit R Markdown erstellen (der Inhalt geht direkt in die E-Mail). Außerdem können wir einen “Haupt”-Report für die Zuschauer RStudio Connect (mit allen Details) und eine “E-Mail”-Version des Berichts haben, die nur die für die Zwecke der E-Mail erforderlichen Elemente enthält. Viel besser!\nStatische Elemente wie ggplots und Bilder können Teil der R Markdown-E-Mail sein. Der Inhalt wird in einen HTML-Nachrichtentext konvertiert, der auf große Desktop-Displays und Handys großartig aussieht. Wir haben große Anstrengungen unternommen, um all dies zu testen. Dies beinhaltete das Betrachten der E-Mails vieler E-Mail-Clients.\nEs war ein bisschen schwierig, R Markdown von RStudio Connect zu melden. Es ist jetzt einfacher, eine E-Mail mit einem veröffentlichten R Markdown-Report zu verknüpfen. Die Funktion prepare_rsc_example_files() kann verwendet werden, um einen Satz von Beispieldateien zu generieren. Diese Dateien zeigen, wie R Markdown-E-Mails in RStudio Connect erstellt werden. Die Dateien enthalten ein Haupt-RMD-Dokument, ein RMD-E-Mail-Dokument und eine CSV-Datei, die als Anhang beigefügt werden kann. Warum die CSV? Denn alle Dateien, die aus dem Hauptdokument .Rmd generiert wurden, können auch angehängt werden! Die Dokumentation, die erklärt, wie diese Dokumente interagieren, welche blastula-Funktionen verwendet werden und wie sie in RSC veröffentlicht werden, finden Sie in der internen Dokumentation der Funktion attach_connect_email().\nJa. Ich bin sicher, dass RStudio Connect-Nutzer und -Empfänger dieser E-Mails die hier vorgenommenen Änderungen lieben werden. In zukünftigen Versionen von blastula werden wir weitere Änderungen an R Markdown-E-Mails über RStudio Connect vornehmen.\nErweitertes HTML-E-Mailing über SMTP RStudio Connect ist nicht die einzige Möglichkeit, E-Mails mit blastula zu versenden. Wir können E-Mails über einen SMTP-Server senden, auf den wir Zugriff haben (z. B. Google Mail, Outlook usw.). Schauen wir uns kurz drei Dinge an, die sich in Bezug auf die E-Mail-Zusammensetzung und den SMTP-Versand verbessert haben.\nÜberarbeitete Nachrichtenkomposition mit mehr Sicherheit Zuvor waren die Textinterpolationsfunktionen des glue-Pakets in die Funktion compose_email() integriert. Dies bedeutet, dass wir die Anweisung \"The date and time of sending is {Sys.time()}.\" Direkt als Eintrag beispielsweise in der Fußzeile der Nachricht verwendet haben könnten. Das Potential zur Bewertung R in den Ketten zu haben, führt zu Sicherheitsrisiken, so dass dies nicht mehr möglich ist. Stattdessen können wir uns einfach dafür entscheiden, glue::glue() oder paste() zu verwenden. Wenn ein Markdown- oder HTML-Element vorhanden ist, ist die Funktion md() erforderlich. Hier ist ein Beispiel für eine einfache Nachricht, die Markdown verwendet:\nemail \u0026lt;- compose_email( body = md( \u0026quot; ## Hello! This is an email message that was generated by the blastula package. Yep, we can use **Markdown** formatting but be sure to use the `md()` function. Here is a link to a great song ([E-MAIL ME!](https://youtu.be/-FcJbEg3vX8)). Cheers, The blastula team \u0026quot;), footer = md( \u0026quot; sent via the [blastula](https://rich-iannone.github.io/blastula) R package \u0026quot;) )  Wir können weiterhin eine Vorschau des E-Mail-Objekts im RStudio Viewer anzeigen, um die perfekte Komposition zu erhalten. Weitere Informationen zum Verfassen von E-Mails mit compose_email() finden Sie im Artikel Simple Email Composition auf der Projektwebsite.\nZum Versenden von E-Mails mit SMTP ist keine externe Software erforderlich In den wenigen Jahren, in denen blastula verfügbar war, stützte er sich zum Versenden von E-Mails auf verschiedene externe Software. Das stimmt nicht mehr. Wir erstellen jetzt einen RFC-2822-E-Mail-Body und senden E-Mails mit einer curl-Paketfunktion. Jetzt können E-Mails mit der Funktion smtp_send() zuverlässig auf allen wichtigen Computerplattformen ohne schwer zu installierende Abhängigkeiten gesendet werden.\nVerbesserte Berechtigungsnachweisverwaltung Das Paket verfügt jetzt über Funktionen zum Konfigurieren und Abrufen von Konfigurationsinformationen und SMTP-Anmeldeinformationen. Wir können dies mit create_smtp_creds_key() konfigurieren. Mit einem solchen hinzugefügten Schlüssel kann die creds_key()-Hilfe zum Versenden von E-Mails über smtp_send() verwendet werden. Alternativ kann eine Berechtigungsnachweisdatei mit der Funktion create_smtp_creds_file() erstellt werden (abgerufen mit creds_file()). Schließlich können die Anmeldeinformationen zum Zeitpunkt des Sendens mit der Funktion creds() vollständig angegeben werden. Immer wenn ein Passwort erforderlich ist, erscheint eine Aufforderung zur Eingabe des Passworts (der Passworttext wird ausgeblendet).\nEs gibt noch mehr! Andere Änderungen umfassen die automatische Bildintegration (über Base64-Codierung) durch die Verwendung der Funktionen add_image() und add_ggplot(), wenn sie mit compose_email() verwendet werden. Die Funktion add_imgur_image() erleichtert die Verwendung externer Bilder in E-Mails. Schließlich gibt es eine neue Reihe von block_*()-Funktionen, mit denen wir E-Mails mit komplexeren Layouts erstellen können.\nDie Zukunft ist da Ich hoffe aufrichtig, dass Sie die neue Version des blastula-Pakets testen. Mit R können wir so viele nützliche Dinge erschaffen. Die Möglichkeit, unsere Ergebnisse per E-Mail zu übermitteln, ist für den Absender und den Empfänger eine absolute Freude.\n  function openLang(evt, cityName) { var i, tabcontent, tablinks; tabcontent = document.getElementsByClassName(\"tabcontent\"); for (i = 0; i ","date":1574380800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574454660,"objectID":"4d81e889cbfec92d782654b9d919f230","permalink":"/post/blastula-0-3/","publishdate":"2019-11-22T00:00:00Z","relpermalink":"/post/blastula-0-3/","section":"post","summary":"The newest release of the **blastula** package lets you to do amazing things with HTML email in **R** and **RStudio Connect**.","tags":["R Packages"],"title":"blastula v0.3","type":"post"},{"authors":null,"categories":null,"content":" The book entitled Exploring Data with R teaches you how to do data analysis with R. The book doesn’t assume any prior experience with programming making it a great introduction with easy-to-follow examples and useful exercises.\n","date":1571529600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571529600,"objectID":"20281aed3cfbf9fa7fca750da29de323","permalink":"/projects/exploring-data-with-r-book/","publishdate":"2019-10-20T00:00:00Z","relpermalink":"/projects/exploring-data-with-r-book/","section":"projects","summary":"An introductory book for data analysis in R.","tags":["R Books"],"title":"[R book] Exploring Data with R","type":"projects"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":[],"categories":null,"content":"","date":1547683200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547683200,"objectID":"ea57c95009d46583f549e9ae1d8a340d","permalink":"/talk/rstudio-conf-2019/","publishdate":"2019-01-17T00:00:00Z","relpermalink":"/talk/rstudio-conf-2019/","section":"talk","summary":"A talk given at rstudio::conf 2019.","tags":[],"title":"Introducing the gt Package","type":"talk"},{"authors":null,"categories":null,"content":" With the gt package, anyone can make wonderful-looking tables using the R programming language. The gt philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. These include the table header, the stub, the stub head, the column labels, the table body, and the table footer.\nThe gt API is designed to be both straightforward yet powerful. The emphasis is on simple functions for the everyday display table needs. However, there are functions for customizing and annotating tables to convey additional information.\n","date":1521504000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521504000,"objectID":"31b25af6531d4d0883a784f3dab5370a","permalink":"/projects/gt-pkg/","publishdate":"2018-03-20T00:00:00Z","relpermalink":"/projects/gt-pkg/","section":"projects","summary":"Easily generate information-rich, publication-quality tables from R","tags":["R Packages"],"title":"[R package] gt","type":"projects"},{"authors":null,"categories":null,"content":" The blastula package makes it easy to produce and send HTML email from R. The message can have three content areas (the body, the header, and the footer) and we can insert Markdown text, R expressions, block-based components, and even some raw HTML. The underlying HTML/CSS is meant to display properly across a wide range of email clients and webmail services. The resulting email message is responsive so it’ll look great on computers and mobile devices.\n","date":1502582400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1502582400,"objectID":"37022a39ee9e857e037bbd8ad639a07d","permalink":"/projects/blastula-pkg/","publishdate":"2017-08-13T00:00:00Z","relpermalink":"/projects/blastula-pkg/","section":"projects","summary":"The blastula R package lets us send HTML email messages.","tags":["R Packages"],"title":"[R package] blastula","type":"projects"},{"authors":null,"categories":null,"content":" The pointblank package let’s us validate data in local data frames or tibbles, in CSV and TSV files, and in database tables (PostgreSQL and MySQL). We can get a detailed summary report of the interrogation, showing how many individual tests in each validation step had passed or failed. The self-contained HTML report provides detailed information on the validation outcomes and it can be used as web content.\n","date":1487808000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487808000,"objectID":"0c925a48661aa287e516b3344a71ecb8","permalink":"/projects/pointblank-pkg/","publishdate":"2017-02-23T00:00:00Z","relpermalink":"/projects/pointblank-pkg/","section":"projects","summary":"The pointblank R package lets us validate data tables.","tags":["R Packages"],"title":"[R package] pointblank","type":"projects"},{"authors":null,"categories":null,"content":" The DiagrammeR package has a collection of graph functions allow you to create graph objects, modify those graphs, get information from the graphs, and do many other useful things. We can easily generate network graphs with data available in tabular datasets. Two specialized data frames contain node data and attributes (node data frames) and edges with associated edge attributes (edge data frames). Because the attributes are always kept alongside the node and edge definitions (within the graph object itself), we can easily work with them.\n","date":1419724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1419724800,"objectID":"672d8104f5a9af8960efacc7c5dceeab","permalink":"/projects/diagrammer-pkg/","publishdate":"2014-12-28T00:00:00Z","relpermalink":"/projects/diagrammer-pkg/","section":"projects","summary":"The DiagrammeR R package lets create, modify, and visualize network graphs.","tags":["R Packages"],"title":"[R package] DiagrammeR","type":"projects"},{"authors":null,"categories":null,"content":" The stationaRy package allows for fast retrieval of meteorological data from met stations located all over the world. Weather data originates from the 29,729 stations available in this dataset where many of these contain data that go back decades. The data comes from the Integrated Surface Dataset (ISD), which is maintained by the National Oceanic and Atmospheric Administration (NOAA).\n","date":1397347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1397347200,"objectID":"ef1413ba0f65aca93e7de598e310527b","permalink":"/projects/stationary-pkg/","publishdate":"2014-04-13T00:00:00Z","relpermalink":"/projects/stationary-pkg/","section":"projects","summary":"The stationaRy R package gives us access to historical weather data.","tags":["R Packages"],"title":"[R package] stationaRy","type":"projects"},{"authors":null,"categories":null,"content":" splitr is an R package for conducting trajectory and dispersion modeling with HYSPLIT. This is useful for atmospheric scientists as the package helps to determine, from one or more receptor sites, where arriving air masses originated. Conversely, it’s possible to model trajectories of air masses from receptor sites. Forward and backward modeling of gas-phase or particulate matter can also be conducted from defined sites. It’s a means to help explain how, where, and when chemicals and materials are atmospherically transported, dispersed, and deposited.\n","date":1386633600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1386633600,"objectID":"89abb0b75e9bc0996c37fc60dd5c46f9","permalink":"/projects/splitr-pkg/","publishdate":"2013-12-10T00:00:00Z","relpermalink":"/projects/splitr-pkg/","section":"projects","summary":"The splitr R package helps model wind trajectories and particle dispersion.","tags":["R Packages"],"title":"[R package] splitr","type":"projects"}]